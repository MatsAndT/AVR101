
Assigment3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ed  00000000  00000000  000008e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ed  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000011c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000354  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000185  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001745  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <debounce>:
#include <avr/io.h>
#include <util/delay.h>

uint8_t debounce(char pinName, uint8_t pinNumber)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	89 83       	std	Y+1, r24	; 0x01
	if (bit_is_clear(pinName, pinNumber)) /* button is pressed now */
  78:	89 81       	ldd	r24, Y+1	; 0x01
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	06 2e       	mov	r0, r22
  7e:	02 c0       	rjmp	.+4      	; 0x84 <debounce+0x18>
  80:	95 95       	asr	r25
  82:	87 95       	ror	r24
  84:	0a 94       	dec	r0
  86:	e2 f7       	brpl	.-8      	; 0x80 <debounce+0x14>
  88:	80 fd       	sbrc	r24, 0
  8a:	11 c0       	rjmp	.+34     	; 0xae <debounce+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	81 ee       	ldi	r24, 0xE1	; 225
  8e:	94 e0       	ldi	r25, 0x04	; 4
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <debounce+0x24>
  94:	00 c0       	rjmp	.+0      	; 0x96 <debounce+0x2a>
  96:	00 00       	nop
	{
		_delay_ms(DEBOUNCE_TIME_MS);
		if (bit_is_clear(pinName, pinNumber)) /* still pressed */
  98:	89 81       	ldd	r24, Y+1	; 0x01
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <debounce+0x36>
  9e:	95 95       	asr	r25
  a0:	87 95       	ror	r24
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <debounce+0x32>
  a6:	80 fd       	sbrc	r24, 0
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <debounce+0x46>
		{
			return (1);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <debounce+0x48>
		}
	}
	return (0);
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <debounce+0x48>
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0f 90       	pop	r0
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <change_led>:
#include <util/delay.h>
#define DEBOUNCE_TIME_MS 5
#include "./bouns.h"

void change_led() {
	PORTB ^= (0b11<<0);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	89 27       	eor	r24, r25
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	08 95       	ret

000000c6 <__vector_1>:
}

// Interrupt for button press
ISR(INT0_vect) {
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
	if (debounce(PIND, 2)) change_led();
  e8:	80 b3       	in	r24, 0x10	; 16
  ea:	62 e0       	ldi	r22, 0x02	; 2
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <debounce>
  f0:	81 11       	cpse	r24, r1
  f2:	0e 94 5e 00 	call	0xbc	; 0xbc <change_led>
};
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	7f 91       	pop	r23
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	4f 91       	pop	r20
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <main>:

int main(void) {
	// setting up interrupt for INT0
	sei();
 118:	78 94       	sei
	PORTD |= 1 << PD2; // Pull-up on PD2
 11a:	82 b3       	in	r24, 0x12	; 18
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	82 bb       	out	0x12, r24	; 18
	GICR |=  1 << INTF0; // Enabling INT1 on PD2
 120:	8b b7       	in	r24, 0x3b	; 59
 122:	80 64       	ori	r24, 0x40	; 64
 124:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1 << ISC01 | 0 << ISC00; // The falling edge of INT0
 126:	85 b7       	in	r24, 0x35	; 53
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	85 bf       	out	0x35, r24	; 53
	
	// LEDs
	DDRB |= (1<<PC0);  // Setting pin B0 as a output
 12c:	87 b3       	in	r24, 0x17	; 23
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<PC1); // Setting pin B1 as a output
 132:	87 b3       	in	r24, 0x17	; 23
 134:	82 60       	ori	r24, 0x02	; 2
 136:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PC0); // Setting pin B0 as 5v
 138:	88 b3       	in	r24, 0x18	; 24
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	88 bb       	out	0x18, r24	; 24
	DDRD |= (1<<PC5);  // Setting pin D5 as a output	
 13e:	81 b3       	in	r24, 0x11	; 17
 140:	80 62       	ori	r24, 0x20	; 32
 142:	81 bb       	out	0x11, r24	; 17

	// Timer 1
	TCCR1A |= (1 << COM1A0); // Set timer to toggle on compare a match
 144:	8f b5       	in	r24, 0x2f	; 47
 146:	80 64       	ori	r24, 0x40	; 64
 148:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12); // Set timer into Compare Output Mode (CTC)
 14a:	8e b5       	in	r24, 0x2e	; 46
 14c:	88 60       	ori	r24, 0x08	; 8
 14e:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 4883; // Timer for 5s (5 * 1000000) / 1024;
 150:	83 e1       	ldi	r24, 0x13	; 19
 152:	93 e1       	ldi	r25, 0x13	; 19
 154:	9b bd       	out	0x2b, r25	; 43
 156:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS12) | (1<<CS10); // Start timer1 with /1024 prescaler
 158:	8e b5       	in	r24, 0x2e	; 46
 15a:	85 60       	ori	r24, 0x05	; 5
 15c:	8e bd       	out	0x2e, r24	; 46
 15e:	ff cf       	rjmp	.-2      	; 0x15e <main+0x46>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
