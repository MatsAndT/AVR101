
Assignment2USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f4  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000648  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f0  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  000015bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c9  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001ead  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_1>
   8:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_13>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 13 01 	call	0x226	; 0x226 <main>
  64:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_init>:
#define BAUD 9600
#define BBRC ((F_CPU/16/BAUD) - 1)

void uart_init() {

	UBRRH = (unsigned char)(BBRC >> 8);
  6c:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BBRC;
  6e:	85 e0       	ldi	r24, 0x05	; 5
  70:	89 b9       	out	0x09, r24	; 9
	
	UCSRB |= 1 << RXCIE;
  72:	8a b1       	in	r24, 0x0a	; 10
  74:	80 68       	ori	r24, 0x80	; 128
  76:	8a b9       	out	0x0a, r24	; 10

	UCSRB |= 1 << TXEN;
  78:	8a b1       	in	r24, 0x0a	; 10
  7a:	88 60       	ori	r24, 0x08	; 8
  7c:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= 1 << RXEN;
  7e:	8a b1       	in	r24, 0x0a	; 10
  80:	80 61       	ori	r24, 0x10	; 16
  82:	8a b9       	out	0x0a, r24	; 10

	//     2 stop bit |  8 Bit Character Size
	UCSRC = 1 << USBS | 1 << UCSZ1 | 1 << UCSZ0;
  84:	8e e0       	ldi	r24, 0x0E	; 14
  86:	80 bd       	out	0x20, r24	; 32
  88:	08 95       	ret

0000008a <transmit_data>:
}

void transmit_data(unsigned char data) {
	while (!(UCSRA & (1<<UDRE)));
  8a:	5d 9b       	sbis	0x0b, 5	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <transmit_data>
	UDR = data;
  8e:	8c b9       	out	0x0c, r24	; 12
  90:	08 95       	ret

00000092 <recieve_data>:
}

unsigned char recieve_data() {
	while (!(UCSRA & (1<<RXC)));
  92:	5f 9b       	sbis	0x0b, 7	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <recieve_data>
	return UDR;
  96:	8c b1       	in	r24, 0x0c	; 12
  98:	08 95       	ret

0000009a <debounce>:
#include <avr/io.h>
#include <util/delay.h>

uint8_t debounce(char pinName, uint8_t pinNumber)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	89 83       	std	Y+1, r24	; 0x01
	if (bit_is_clear(pinName, pinNumber)) /* button is pressed now */
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	06 2e       	mov	r0, r22
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <debounce+0x18>
  ae:	95 95       	asr	r25
  b0:	87 95       	ror	r24
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <debounce+0x14>
  b6:	80 fd       	sbrc	r24, 0
  b8:	11 c0       	rjmp	.+34     	; 0xdc <debounce+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	81 ee       	ldi	r24, 0xE1	; 225
  bc:	94 e0       	ldi	r25, 0x04	; 4
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <debounce+0x24>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <debounce+0x2a>
  c4:	00 00       	nop
	{
		_delay_ms(DEBOUNCE_TIME_MS);
		if (bit_is_clear(pinName, pinNumber)) /* still pressed */
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <debounce+0x36>
  cc:	95 95       	asr	r25
  ce:	87 95       	ror	r24
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <debounce+0x32>
  d4:	80 fd       	sbrc	r24, 0
  d6:	04 c0       	rjmp	.+8      	; 0xe0 <debounce+0x46>
		{
			return (1);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	03 c0       	rjmp	.+6      	; 0xe2 <debounce+0x48>
		}
	}
	return (0);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	01 c0       	rjmp	.+2      	; 0xe2 <debounce+0x48>
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0f 90       	pop	r0
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <change_led>:
#include "./kom.h"
#define DEBOUNCE_TIME_MS 5
#include "./bouns.h"

void change_led() {
	PORTB ^= (0b11<<0);
  ea:	98 b3       	in	r25, 0x18	; 24
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	89 27       	eor	r24, r25
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	08 95       	ret

000000f4 <__vector_1>:
}

ISR(INT0_vect) {
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	if (debounce(PIND, 2)) transmit_data('a');
 116:	80 b3       	in	r24, 0x10	; 16
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	0e 94 4d 00 	call	0x9a	; 0x9a <debounce>
 11e:	88 23       	and	r24, r24
 120:	19 f0       	breq	.+6      	; 0x128 <__vector_1+0x34>
 122:	81 e6       	ldi	r24, 0x61	; 97
 124:	0e 94 45 00 	call	0x8a	; 0x8a <transmit_data>
};
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	bf 91       	pop	r27
 12e:	af 91       	pop	r26
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	7f 91       	pop	r23
 136:	6f 91       	pop	r22
 138:	5f 91       	pop	r21
 13a:	4f 91       	pop	r20
 13c:	3f 91       	pop	r19
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_2>:

ISR(INT1_vect) {
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	if (debounce(PIND, 3)) transmit_data('b');
 16c:	80 b3       	in	r24, 0x10	; 16
 16e:	63 e0       	ldi	r22, 0x03	; 3
 170:	0e 94 4d 00 	call	0x9a	; 0x9a <debounce>
 174:	88 23       	and	r24, r24
 176:	19 f0       	breq	.+6      	; 0x17e <__vector_2+0x34>
 178:	82 e6       	ldi	r24, 0x62	; 98
 17a:	0e 94 45 00 	call	0x8a	; 0x8a <transmit_data>
};
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_13>:

ISR(USART_RXC_vect) {
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	6f 93       	push	r22
 1b4:	7f 93       	push	r23
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	unsigned char data = recieve_data();
 1c2:	0e 94 49 00 	call	0x92	; 0x92 <recieve_data>
	if (data == 'a') {
 1c6:	81 36       	cpi	r24, 0x61	; 97
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <__vector_13+0x30>
		change_led();
 1ca:	0e 94 75 00 	call	0xea	; 0xea <change_led>
 1ce:	1a c0       	rjmp	.+52     	; 0x204 <__vector_13+0x64>
	} else if (data == 'b') {
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	c1 f4       	brne	.+48     	; 0x204 <__vector_13+0x64>
		change_led();
 1d4:	0e 94 75 00 	call	0xea	; 0xea <change_led>
 1d8:	2f e5       	ldi	r18, 0x5F	; 95
 1da:	8a ee       	ldi	r24, 0xEA	; 234
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <__vector_13+0x3e>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <__vector_13+0x48>
 1e8:	00 00       	nop
		_delay_ms(300);
		change_led();
 1ea:	0e 94 75 00 	call	0xea	; 0xea <change_led>
 1ee:	2f e5       	ldi	r18, 0x5F	; 95
 1f0:	8a ee       	ldi	r24, 0xEA	; 234
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <__vector_13+0x54>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <__vector_13+0x5e>
 1fe:	00 00       	nop
		_delay_ms(300);
		change_led();
 200:	0e 94 75 00 	call	0xea	; 0xea <change_led>
	}
}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <main>:

int main() {
	uart_init();
 226:	0e 94 36 00 	call	0x6c	; 0x6c <uart_init>
	// setting up interrupt for INT0
	sei();
 22a:	78 94       	sei
	PORTD |= 1 << PD2; // Pull-up on PD2
 22c:	82 b3       	in	r24, 0x12	; 18
 22e:	84 60       	ori	r24, 0x04	; 4
 230:	82 bb       	out	0x12, r24	; 18
	GICR |=  1 << INTF0; // Enabling INT1 on PD2
 232:	8b b7       	in	r24, 0x3b	; 59
 234:	80 64       	ori	r24, 0x40	; 64
 236:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1 << ISC01 | 0 << ISC00; // The falling edge of INT0
 238:	85 b7       	in	r24, 0x35	; 53
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	85 bf       	out	0x35, r24	; 53
	
	// Setting up interrupt for INT1
	PORTD |= 1 << PD3; // Pull-up on PD3
 23e:	82 b3       	in	r24, 0x12	; 18
 240:	88 60       	ori	r24, 0x08	; 8
 242:	82 bb       	out	0x12, r24	; 18
	GICR |=  1 << INTF1; // Enabling INT1 on PD3
 244:	8b b7       	in	r24, 0x3b	; 59
 246:	80 68       	ori	r24, 0x80	; 128
 248:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1 << ISC11 | 0 << ISC10; // The falling edge of INT1
 24a:	85 b7       	in	r24, 0x35	; 53
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	85 bf       	out	0x35, r24	; 53

	DDRB |= (1<<PC0);  // Setting pin B0 as a output
 250:	87 b3       	in	r24, 0x17	; 23
 252:	81 60       	ori	r24, 0x01	; 1
 254:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<PC1); // Setting pin B1 as a output
 256:	87 b3       	in	r24, 0x17	; 23
 258:	82 60       	ori	r24, 0x02	; 2
 25a:	87 bb       	out	0x17, r24	; 23
	DDRB |= 1 << PC2; // Setting pin B2 as output
 25c:	87 b3       	in	r24, 0x17	; 23
 25e:	84 60       	ori	r24, 0x04	; 4
 260:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PC0); // Setting pin B0 as 5v
 262:	88 b3       	in	r24, 0x18	; 24
 264:	81 60       	ori	r24, 0x01	; 1
 266:	88 bb       	out	0x18, r24	; 24
 268:	ff cf       	rjmp	.-2      	; 0x268 <main+0x42>

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
